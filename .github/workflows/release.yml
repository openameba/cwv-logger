name: releaseing

on:
  push:
    branches:
      - release/major
      - release/minor
      - release/patch
      - release/premajor
      - release/preminor
      - release/prepatch
      - release/prerelease
      # Allow prerelease with preid
      - release/prerelease-*

env:
  ALLOW_PREID: "beta|alpha"

jobs:
  releaseing:
    name: releaseing
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: actions/setup-node@v3
        with:
          node-version: 16
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - uses: actions/cache@v3
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Run install
        run: yarn install --frozen-lockfile
      - name: Set git user
        run: |
          git config --global user.email "<>"
          git config --global user.name "openameba"
      - name: Log in to npm
        run: |
          echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" > ~/.npmrc
          npm whoami
      - name: Extract branch from git ref
        run: |
          echo "::set-output name=name::${GITHUB_REF#refs/*/}"
          echo "::set-output name=version::${GITHUB_REF##*/}"
        id: extract_branch
      - name: Check npm version preid
        run: |
          HAS_PREID=$(node -p "process.env.VERSION.startsWith('prerelease-') ? 1 : 0")
          echo "::set-output name=has_preid::${HAS_PREID}"
          if [ $HAS_PREID -eq 1 ]; then
            PREID_NAME=$(node -p "const v = process.env.VERSION.match(/^prerelease-(.+)$/); v ? v[1] : ''")
            # validate preid
            IS_ALLOWED=$(node -p "'${ALLOW_PREID}'.split('|').includes('${PREID_NAME}') ? 1 : 0")
            if [ $IS_ALLOWED -eq 0 ]; then
              echo "`${PREID_NAME}` preid is not allowed."
              exit 1
            fi
            echo "::set-output name=name::${PREID_NAME}"
          fi
        id: preid
        env:
          VERSION: ${{ steps.extract_branch.outputs.version }}
      - name: Bump a package version
        if: steps.preid.outputs.has_preid == 0
        run: npm version ${{ steps.extract_branch.outputs.version }}
      - name: Bump a package version with preid
        if: steps.preid.outputs.has_preid == 1
        run: npm version prerelease --preid=${{ steps.preid.outputs.name }}
      - name: Releasing with npm
        if: steps.preid.outputs.has_preid == 0
        run: |
          yarn build && yarn cp
          npm publish --access public
      - name: Releasing with npm tag
        if: steps.preid.outputs.has_preid == 1
        run: |
          yarn build && yarn cp
          npm publish --access public --tag=${{ steps.preid.outputs.name }}
      - name: Push version commit
        run: git push && git push --tags
      - name: Create Pull Request
        run: >
          curl
          -X POST
          -H "Accept: application/vnd.github.v3+json"
          -H "Authorization: token ${{ secrets.PERSONAL_ACCESS_TOKEN }}"
          https://api.github.com/repos/${{ github.event.repository.owner.name }}/${{ github.event.repository.name }}/pulls
          -d '{"head":"${{ steps.extract_branch.outputs.name }}","base":"${{ github.event.repository.default_branch }}","title":"chore(release): publish"}'
